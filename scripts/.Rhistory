"x_stor_out",
"x_stor_lev",
"intermittent")
reg_ws_p_t<-c(
"x_hydro",
"x_spill",
"x_h_stor_in",
"x_h_stor_out",
"x_h_stor_lv",
"x_hyd_up",
"hydro"
)
reg_t<-c("x_curtail",
"x_loss",
"load")
reg_reg_t<-c("x_transfer")
t<-c("length")
single<-c("x_invest_thermal_cap",
"x_invest_storage",
"x_invest_intermittent")
s<-NULL
for(i in c(reg_p_t,reg_ws_p_t,reg_t,reg_reg_t)){
s1<-results[[i]] %>% mutate(name=i) %>% group_by(name,reg,t) %>% summarize(value=sum(value))
s1$timenew<-as.numeric(substr(s1$t,2,nchar(s1$t)))
s<-bind_rows(s,s1)
}
View(s)
rds<-calculateCompleteRegionalDS(results)
calculateCompleteRegionalDS<-function(results){
#calculate complete hydroproduction
reg_p_t<-c("x_term",
"x_renew",
"x_stor_in",
"x_stor_out",
"x_stor_lev",
"intermittent")
reg_ws_p_t<-c(
"x_hydro",
"x_spill",
"x_h_stor_in",
"x_h_stor_out",
"x_h_stor_lv",
"x_hyd_up",
"hydro"
)
reg_t<-c("x_curtail",
"x_loss",
"load")
reg_reg_t<-c("x_transfer")
t<-c("length")
single<-c("x_invest_thermal_cap",
"x_invest_storage",
"x_invest_intermittent")
s<-NULL
for(i in c(reg_p_t,reg_ws_p_t,reg_t,reg_reg_t)){
s1<-results[[i]] %>% mutate(name=i) %>% group_by(name,reg,t) %>% summarize(value=sum(value))
s1$timenew<-as.numeric(substr(s1$t,2,nchar(s1$t)))
s<-bind_rows(s,s1)
}
return(s)
}
rds<-calculateCompleteRegionalDS(results)
rds<-calculateCompleteRegionalDS(results)
rds
select(rds,name="x_hydro")
?select
?subset
?filter
filter(rds,name="x_hydro"|name="x_h_stor_out"|name="x_term"|name="x_renew"|name="x_stor_out"|name="x_curtail"|name="x_loss")
filter(rds,name=="x_hydro"|
name=="x_h_stor_out"|
name=="x_term"|
name=="x_renew"|
name=="x_stor_out"|
name=="x_loss")
filter(rds,name=="x_hydro"|
name=="x_h_stor_out"|
name=="x_term"|
name=="x_renew"|
name=="x_stor_out"|
name=="x_loss") %>% group_by(reg,t,timenew) %>% summarize(sum=sum(value))
filter(rds,name=="x_h_stor_out")
filter(rds,name=="x_h_stor_out") %>% mutate(value=value*0.99)
rds<-filter(rds,name=="x_h_stor_out") %>% mutate(value=value*0.99)
filter(rds,name=="x_hydro"|
name=="x_h_stor_out"|
name=="x_term"|
name=="x_renew"|
name=="x_stor_out"|
name=="x_loss") %>% group_by(reg,t,timenew) %>% summarize(sum=sum(value))
sum_negative<-filter(rds,name=="x_curtail"|
name=="x_loss") %>% group_by(reg,t,timenew) %>% summarize(sum=-1*sum(value))
sum_negative
join<-full_join(sum_supply,sum_negative,by=c("reg","t","timenew"))
sum_supply<-filter(rds,name=="x_hydro"|
name=="x_h_stor_out"|
name=="x_term"|
name=="x_renew"|
name=="x_stor_out"|
name=="x_loss"|
name=="x_transfer") %>% group_by(reg,t,timenew) %>% summarize(sum=sum(value))
sum_negative<-filter(rds,name=="x_curtail"|
name=="x_loss") %>% group_by(reg,t,timenew) %>% summarize(sum=-1*sum(value))
join<-full_join(sum_supply,sum_negative,by=c("reg","t","timenew"))
join
mutate(join,fsupply=sum.x+sum.y)
fout<-mutate(join,fsupply=sum.x+sum.y)
fout
calculateFullBalance<-function(rds){
rds<-filter(rds,name=="x_h_stor_out") %>% mutate(value=value*0.99)
sum_supply<-filter(rds,name=="x_hydro"|
name=="x_h_stor_out"|
name=="x_term"|
name=="x_renew"|
name=="x_stor_out"|
name=="x_loss"|
name=="x_transfer") %>% group_by(reg,t,timenew) %>% summarize(sum=sum(value))
sum_negative<-filter(rds,name=="x_curtail"|
name=="x_loss") %>% group_by(reg,t,timenew) %>% summarize(sum=-1*sum(value))
join<-full_join(sum_supply,sum_negative,by=c("reg","t","timenew"))
join[is.na(join$sum.x)]<-0
join[is.na(join$sum.y)]<-0
fout<-mutate(join,fsupply=sum.x+sum.y)
return(fout)
}
rds<-calculateCompleteRegionalDS(results) %>% calculateFullBalance()
debug(calculateFullBalance)
rds<-calculateCompleteRegionalDS(results) %>% calculateFullBalance()
rds<-calculateCompleteRegionalDS(results) %>% calculateFullBalance()
is.na(join$sum.y)
join[is.na(join$sum.y)]
calculateFullBalance<-function(rds){
rds<-filter(rds,name=="x_h_stor_out") %>% mutate(value=value*0.99)
sum_supply<-filter(rds,name=="x_hydro"|
name=="x_h_stor_out"|
name=="x_term"|
name=="x_renew"|
name=="x_stor_out"|
name=="x_loss"|
name=="x_transfer") %>% group_by(reg,t,timenew) %>% summarize(sum=sum(value))
sum_negative<-filter(rds,name=="x_curtail"|
name=="x_loss") %>% group_by(reg,t,timenew) %>% summarize(sum=-1*sum(value))
join<-full_join(sum_supply,sum_negative,by=c("reg","t","timenew"))
join$sum.x[is.na(join$sum.x)]<-0
join$sum.y[is.na(join$sum.y)]<-0
fout<-mutate(join,fsupply=sum.x+sum.y)
return(fout)
}
rds<-calculateCompleteRegionalDS(results) %>% calculateFullBalance()
rds
results$load
results<-runGAMSReadResults()
rds<-calculateCompleteRegionalDS(results) %>% calculateFullBalance()
rds
arrange(rds,timenew)
calculateFullBalance<-function(rds){
rds<-filter(rds,name=="x_h_stor_out") %>% mutate(value=value)
sum_supply<-filter(rds,name=="x_hydro"|
name=="x_h_stor_out"|
name=="x_term"|
name=="x_renew"|
name=="x_stor_out"|
name=="x_loss"|
name=="x_transfer") %>% group_by(reg,t,timenew) %>% summarize(sum=sum(value))
sum_negative<-filter(rds,name=="x_curtail"|
name=="x_loss") %>% group_by(reg,t,timenew) %>% summarize(sum=-1*sum(value))
join<-full_join(sum_supply,sum_negative,by=c("reg","t","timenew"))
join$sum.x[is.na(join$sum.x)]<-0
join$sum.y[is.na(join$sum.y)]<-0
fout<-mutate(join,fsupply=sum.x+sum.y)
return(fout)
}
rds<-filter(rds,name=="x_h_stor_out") %>% mutate(value=value)
rds
rds<-calculateCompleteRegionalDS(results)
rds<-filter(rds,name=="x_h_stor_out") %>% mutate(value=value)
rds
####calculates the full balance of supply
calculateFullBalance<-function(rds){
rds$value[rds$name=="x_h_stor_out"] <-rds$value[rds$name=="x_h_stor_out"]*0.99
rds$value[rds$name=="x_stor_out"] <-rds$value[rds$name=="x_stor_out"]*0.9
rds<-filter(rds,name=="x_stor_out") %>% mutate(value=value*0.9)
sum_supply<-filter(rds,name=="x_hydro"|
name=="x_h_stor_out"|
name=="x_term"|
name=="x_renew"|
name=="x_stor_out"|
name=="x_loss"|
name=="x_transfer") %>% group_by(reg,t,timenew) %>% summarize(sum=sum(value))
sum_negative<-filter(rds,name=="x_curtail"|
name=="x_stor_in") %>% group_by(reg,t,timenew) %>% summarize(sum=-1*sum(value))
join<-full_join(sum_supply,sum_negative,by=c("reg","t","timenew"))
join$sum.x[is.na(join$sum.x)]<-0
join$sum.y[is.na(join$sum.y)]<-0
fout<-mutate(join,fsupply=sum.x+sum.y)
return(fout)
}
results<-runGAMSReadResults()
rds<-calculateCompleteRegionalDS(results) %>% calculateFullBalance()
rds
debug(calculateFullBalance)
rds
rds<-calculateCompleteRegionalDS(results) %>% calculateFullBalance()
rds
####calculates the full balance of supply
calculateFullBalance<-function(rds){
rds$value[rds$name=="x_h_stor_out"] <-rds$value[rds$name=="x_h_stor_out"]*0.99
rds$value[rds$name=="x_stor_out"] <-rds$value[rds$name=="x_stor_out"]*0.9
sum_supply<-filter(rds,name=="x_hydro"|
name=="x_h_stor_out"|
name=="x_term"|
name=="x_renew"|
name=="x_stor_out"|
name=="x_loss"|
name=="x_transfer") %>% group_by(reg,t,timenew) %>% summarize(sum=sum(value))
sum_negative<-filter(rds,name=="x_curtail"|
name=="x_stor_in") %>% group_by(reg,t,timenew) %>% summarize(sum=-1*sum(value))
join<-full_join(sum_supply,sum_negative,by=c("reg","t","timenew"))
join$sum.x[is.na(join$sum.x)]<-0
join$sum.y[is.na(join$sum.y)]<-0
fout<-mutate(join,fsupply=sum.x+sum.y)
return(fout)
}
results<-runGAMSReadResults()
rds<-calculateCompleteRegionalDS(results) %>% calculateFullBalance()
rds
arrange(rds,timenew)
results$load
filter(rds,name="load") %>% arrange(timenew)
filter(rds,name=="load") %>% arrange(timenew)
rds<-calculateCompleteRegionalDS(results)
filter(rds,name=="load") %>% arrange(timenew)
filter(rds,name=="load") %>% arrange(timenew) %>% . - arrange(fb,timenew)
filter(rds,name=="load") %>% arrange(timenew)
neg<-function(a,b)
{return (a-b)}
filter(rds,name=="load") %>% arrange(timenew) %>% neg(arrange(fb,timenew))
fb<- rds %>% calculateFullBalance()
filter(rds,name=="load") %>% arrange(timenew) %>% neg(arrange(fb,timenew))
filter(rds,name=="load") %>% arrange(timenew)
neg(arrange(fb,timenew))
(arrange(fb,timenew))
filter(rds,name=="load") %>% arrange(timenew) %>% select(value) %>% neg(select(arrange(fb,timenew),value))
fb
filter(rds,name=="load") %>% arrange(timenew) %>% select(value) %>% neg(select(arrange(fb,timenew),fsupply))
filter(rds,name=="load") %>% arrange(timenew) %>% select(value)
select(arrange(fb,timenew),fsupply)
filter(rds,name=="load") %>% arrange(timenew) %>% select(value)
filter(rds,name=="load") %>% arrange(timenew) %>% .$value
filter(rds,name=="load") %>% arrange(timenew) %>% .$value %>% select(arrange(fb,timenew),fsupply)
filter(rds,name=="load") %>% arrange(timenew) %>% .$value %>% neg(select(arrange(fb,timenew),fsupply))
select(arrange(fb,timenew),fsupply)
filter(rds,name=="load") %>% arrange(timenew) %>% .$value %>% neg((arrange(fb,timenew)$fsupply))
filter(rds,name=="load") %>% arrange(timenew) %>% .$value %>% neg((arrange(fb,timenew)$fsupply))
comp<-filter(rds,name=="load") %>%
arrange(timenew) %>%
.$value %>%
neg((arrange(fb,timenew)$fsupply))
checkEquals(sum(abs(comp)),0)
library(RUnit)
testsuite.RE_EXTREME<-defineTestSuite("RE_EXTREME",
dirs=file.path(paste(base_dir,"/tests",sep="")),
testFileRegexp="^test.+\\.R",
testFuncRegexp = "^test.+",
rngKind="Marsaglia-Multicarry",
rngNormalKind="Kinderman-Ramage")
testResults <- runTestSuite(testsuite.RE_EXTREME)
printTextProtocol(testResults)
###sample test function
test.generateVariableResolutionTimeSeries<-function(){
###generate test data
length<-24*40
load<-(3*runif(length))
renewable<-data.frame(runif(length),runif(length))
hydro<-data.frame(runif(length))
renewable_scaling<-1
lower<-0
upper<-2
threshhold<-2
####checks if sum of production is equal before and after application of function
res<-generateVariableResolutionTimeSeries(load,renewable,hydro,renewable_scaling,lower,upper,threshhold)
res_comp<-apply(res[,1:(ncol(res)-1)],2,sum)
dat_comp<-apply(data.frame(renewable,hydro,load),2,sum)
res_comp<-unname(res_comp)
dat_comp<-unname(dat_comp)
checkEqualsNumeric(res_comp,dat_comp)
####checks if all data is used if limit is chosen appropriately
lower<-100
upper<- -1000
res<-generateVariableResolutionTimeSeries(load,renewable,hydro,renewable_scaling,lower,upper,threshhold)
checkEquals(length(load),nrow(res))
####checks if all data is reduced if limit is chosen appropriately
lower<- -10000
upper<- 10000
res<-generateVariableResolutionTimeSeries(load,renewable,hydro,renewable_scaling,lower,upper,threshhold)
checkEquals(length(load)/24,nrow(res))
}
test.GAMSModel.TC1<-function(){
####Test case
####One region, 24 timesteps
####no hydro, no intermittent production
####1 thermal power plant
####i.e. total supply from thermal power plant should equal load
####installed capacity should be equal to maximum load
setwd(base_dir)
###create one hydropower plant without inflows
tribble(
~id, ~Region, ~River, ~Plant, ~minFlow, ~maxFlow, ~maxReservoir, ~runOffDelay, ~hydroConvFact, ~downRiver,
#--|--------|-------|-------|---------|---------|--------------|-------------|---------------|-----------|
1,   "SE1"  , "RS1" , "HP1" ,     0   ,    0    ,       0      ,       0     ,        0      ,    "HP0",
2,   "SE1"  , "RS1" , "HP2" ,     0   ,    0    ,       0      ,       0     ,        0      ,    "HP1"
) %>%  write_delim(path="../data/test/hydro/hydro_tc1.csv",delim=";")
date<-as.POSIXct("2014-01-01 01:00:00")
date1<-as.POSIXct("2014-01-01 02:00:00")
tibble(Time=c(date,date),
Index=c(1,2),
HydropowerProduction=c(0,0)) %>%
write_feather("../data/test/hydro/hydro_ts_tc1.feather")
#####one windpower plant without flows
tibble(Date=c(date,date1),
R=c("SE1","SE1"),
WindPower=c(0,0),
P=c("P1","P1"),
capFact=c(0,0)) %>%
write_feather("../data/test/wind/wind_ts_tc1.feather")
#####load runs from 1 to 48
tibble(Date=seq(as.POSIXct("2014-01-01 00:00:00"),as.POSIXct("2014-01-02 23:00:00"),by="h"),
Region=c("SE1"),
Load=1:48) %>% write_feather("../data/test/load/load_ts_tc1.feather")
# Transmission capacities - 1 region only, so no transfer
tribble(
~id,~Region1,~Region2,~Max,
#--|--------|--------|----
1, "SE1"  , "SE2"  ,  0
) %>% write_feather("../data/test/transmission/cap_tc1.feather")
#One thermal power plant
tribble(
~id,~Region, ~P ,~Technology,~Val,
#--|-------|----|-----------|----
1 , "SE1" ,"P1", "TEC1"    , 1
) %>% write_delim(path="../data/test/investOptions/investOpts_tc1.csv",delim=";")
tribble(
~param,~value,
#-----|------|
"C1"  ,  50  ,#variable thermal
"C2"  ,100000,#loss
"C3"  ,     1,#investment thermal
"C4"  ,100000,#investment storage
"C5"  ,500000 #investment intermittent
) %>% write_delim(path="../data/test/costs/costs_tc1.csv",delim=";")
period<-c("2014-01-01 00:00:00 CET"
, "2014-01-02 23:00:00 CET")
prepareFullRun(period,
hydFile="../data/test/hydro/hydro_tc1.csv",
hydFeather="../data/test/hydro/hydro_ts_tc1.feather",
windFeather="../data/test/wind/wind_ts_tc1.feather",
loadFeather="../data/test/load/load_ts_tc1.feather",
transmissionFeather="../data/test/transmission/cap_tc1.feather",
investCSV="../data/test/investOptions/investOpts_tc1.csv",
costsCSV="../data/test/costs/costs_tc1.csv")
results<-runGAMSReadResults()
checkEquals(sum(results$load$value-results$x_term$value),0)
checkEquals(results$x_invest_thermal_cap$value,48)
}
test.GAMSModel.TC2<-function(){
##########TEST CASE 2 - switch costs for variable thermal and loss
##########should make loss the preferred choice!
tribble(
~param,~value,
#-----|------|
"C1"  ,100000,#variable thermal
"C2"  ,  50  ,#loss
"C3"  ,     1,#investment thermal
"C4"  ,100000,#investment storage
"C5"  ,500000 #investment intermittent
) %>% write_delim(path="../data/test/costs/costs_tc2.csv",delim=";")
prepareFullRun(period,
hydFile="../data/test/hydro/hydro_tc1.csv",
hydFeather="../data/test/hydro/hydro_ts_tc1.feather",
windFeather="../data/test/wind/wind_ts_tc1.feather",
loadFeather="../data/test/load/load_ts_tc1.feather",
transmissionFeather="../data/test/transmission/cap_tc1.feather",
investCSV="../data/test/investOptions/investOpts_tc1.csv",
costsCSV="../data/test/costs/costs_tc2.csv")
results<-runGAMSReadResults()
checkEquals(sum(results$load$value-results$x_loss$value),0)
checkEquals(nrow(results$x_invest_thermal_cap),0)
}
test.GAMSModel.TC3<-function(){
##########TEST CASE 3 - hydropower plant cascade
###create hydropower plants
tribble(
~id, ~Region, ~River, ~Plant, ~minFlow, ~maxFlow, ~maxReservoir, ~runOffDelay, ~hydroConvFact, ~downRiver,
#--|--------|-------|-------|---------|---------|--------------|-------------|---------------|-----------|
1,   "SE1"  , "RS1" , "HP1" ,     0   ,10000    ,       0      ,       1     ,        1      ,    "HP2",
2,   "SE1"  , "RS1" , "HP2" ,     0   ,10000    ,       0      ,       1     ,        1      ,    "HP0"
) %>%  write_delim(path="../data/test/hydro/hydro_tc3.csv",delim=";")
date<-as.POSIXct("2014-01-01 01:00:00")
date1<-as.POSIXct("2014-01-01 02:00:00")
tibble(Time=rep(seq(as.POSIXct("2014-01-01 00:00:00"),as.POSIXct("2014-01-02 23:00:00"),by="h"),2),
Index=c(rep(1,48),rep(2,48)),
HydropowerProduction=c(rep(1,96))) %>%
write_feather("../data/test/hydro/hydro_ts_tc3.feather")
tibble(Date=seq(as.POSIXct("2014-01-01 00:00:00"),as.POSIXct("2014-01-02 23:00:00"),by="h"),
Region=c("SE1"),
Load=c(2,rep(3,47))) %>% write_feather("../data/test/load/load_ts_tc3.feather")
prepareFullRun(period,
hydFile="../data/test/hydro/hydro_tc3.csv",
hydFeather="../data/test/hydro/hydro_ts_tc3.feather",
windFeather="../data/test/wind/wind_ts_tc1.feather",
loadFeather="../data/test/load/load_ts_tc3.feather",
transmissionFeather="../data/test/transmission/cap_tc1.feather",
investCSV="../data/test/investOptions/investOpts_tc1.csv",
costsCSV="../data/test/costs/costs_tc2.csv")
results<-runGAMSReadResults()
hyd<-results$x_hydro %>% group_by(reg,t,ws) %>% summarize(v1=sum(value))
checkEquals(sum(hyd[,4]-results$load$value),0)
checkEquals(nrow(results$x_invest_thermal_cap),0)
}
test.GAMSModel.TC4<-function(){
##########TEST CASE 4 - hydropower plant cascade with minimum flows
###create two hydropower plants
setwd(base_dir)
tribble(
~id, ~Region, ~River, ~Plant, ~minFlow, ~maxFlow, ~maxReservoir, ~runOffDelay, ~hydroConvFact, ~downRiver,
#--|--------|-------|-------|---------|---------|--------------|-------------|---------------|-----------|
1,   "SE1"  , "RS1" , "HP1" ,     0   ,100      ,       100    ,       1     ,        1      ,    "HP2",
2,   "SE1"  , "RS1" , "HP2" ,     0.99,100      ,       100    ,       1     ,        1      ,    "HP0"
) %>%  write_delim(path="../data/test/hydro/hydro_tc4.csv",delim=";")
tibble(Date=seq(as.POSIXct("2014-01-01 00:00:00"),as.POSIXct("2014-01-02 23:00:00"),by="h"),
Region=c("SE1"),
Load=c(2,rep(1,45),10,10)) %>% write_feather("../data/test/load/load_ts_tc4.feather")
prepareFullRun(period,
hydFile="../data/test/hydro/hydro_tc4.csv",
hydFeather="../data/test/hydro/hydro_ts_tc3.feather",
windFeather="../data/test/wind/wind_ts_tc1.feather",
loadFeather="../data/test/load/load_ts_tc4.feather",
transmissionFeather="../data/test/transmission/cap_tc1.feather",
investCSV="../data/test/investOptions/investOpts_tc1.csv",
costsCSV="../data/test/costs/costs_tc2.csv")
results<-runGAMSReadResults()
rds<-calculateCompleteRegionalDS(results)
fb<- rds %>% calculateFullBalance()
comp<-filter(rds,name=="load") %>%
arrange(timenew) %>%
.$value %>%
neg((arrange(fb,timenew)$fsupply))
checkEquals(sum(abs(comp)),0)
###CONTINUE HERE
###MIN-FLOW DOES NOT WORK AT ALL!!!!
}
neg<-function(a,b)
{return (a-b)}
library(RUnit)
testsuite.RE_EXTREME<-defineTestSuite("RE_EXTREME",
dirs=file.path(paste(base_dir,"/tests",sep="")),
testFileRegexp="^test.+\\.R",
testFuncRegexp = "^test.+",
rngKind="Marsaglia-Multicarry",
rngNormalKind="Kinderman-Ramage")
testResults <- runTestSuite(testsuite.RE_EXTREME)
printTextProtocol(testResults)
prepareHydroParameters<-function(hydroData,hydroTimeSeries){
###simple parameters which are directly extracted from the input table
names<-list("minFlow",
"maxFlow",
"maxHydPower",
"maxReservoir",
"runOffDelay",
"hydroConvFact")
uels<-2:4
uelNames<-list("SE","RS","HP")
valColumns<-names
params<-mapply(tidyToGDXparam,
name=names,
valColumn=valColumns,
MoreArgs=list(tb=hydroData,uelColumns=uels,uelPrefix=uelNames),
SIMPLIFY=FALSE
)
###upRiver has to be derived from downriver
downRiver<-select(hydroData,2:4,downRiver)
upRiver<-inner_join(downRiver,downRiver,by=c("Plant" = "downRiver")) %>%
select(Region.x,River.x,Plant,Plant.y) %>%
mutate(val=1)
#u1<-upRiver[,3]
#upRiver[,3]<-upRiver[,4]
#upRiver[,4]<-u1
params[[length(params)+1]]<-tidyToGDXparam(name="upRiver",
tb=upRiver,
uelColumns=1:4,
uelPrefix=list("SE","RS","HP","HP"),
valColumn="val")
###join hydro timeseries...
outTs<-inner_join(hydroData,hydroTimeSeries,by=c("id"="Index"))
nmbDivisions<-nrow(unique(outTs[,2:4]))
outTs<-mutate(outTs,
TimeIndex=paste("T",rep(c(1:(nrow(outTs)/nmbDivisions)),nmbDivisions),
sep=""))
params[[length(params)+1]]<-tidyToGDXparam(name="hydro",
tb=outTs,
uelColumns=c(2,ncol(outTs),3:4),
uelPrefix=list("SE","T","RS","HP"),
valColumn="HydropowerProduction")
return(params)
}
base_dir<-"D:/google drive/Anträge/formas/RE_EXTREME github/RE_EXTREME/scripts"
setwd(base_dir)
source("functions_gdx_transfer.R")
####prepare run
period<-c("2008-01-01 00:00:00 CET"
, "2014-01-02 23:00:00 CET")
prepareFullRun(period)
