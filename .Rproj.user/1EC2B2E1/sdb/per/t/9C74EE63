{
    "collab_server" : "",
    "contents" : "########################################################################################################\n#     This script loads all ehype and shype river discharge time series for a specific region\n#     (i.e. subbasins within a specific region or subbasins that contain hydro power plants)\n#     and stores the time series for relevant subbasins in a new file (e.g. \"ts_ehype.Rdata)\n########################################################################################################\n\n####################################################################################################### \n#####                                       Load libraries                                        #####\n####################################################################################################### \nsource(\"scripts/hydro/00_load_libraries.R\")\n\n\n####################################################################################################### \n#####                        Load and prepare spatial data sets                                   #####\n####################################################################################################### \n\n### Load Nuts3 regions data sets\nSweden_Nuts3               <- readOGR(dsn = \"gis_data/SE_NUTS3\", layer = \"SE_NUTS3\")\n### Load Swedisch bidding areas (test file)\nse_bidding_areas           <- readOGR(dsn = \"gis_data/elomrade\", layer = \"elomrade_test\")\n### Load hype data sets\nehype_subbasins_EU         <- readOGR(dsn = \"gis_data/ehype_riverbasins\", layer = \"e-hype3_subids\")\nshype_subbasins_Sweden     <- readOGR(dsn = \"gis_data/shype_riverbasins\", layer = \"Sweden_Riverbasins_SubID\")\n\n### Load Ecrin data ###\n# switch working directory\n  mywd <- getwd()\n  setwd(\"~/+data/_Gis_Data/ECRINS\")\n\n# import swedish basins (c_zhyd) from shapefile\n  se_ecrins_zhyd         <- readOGR(dsn =\"c_zhyd\", layer = \"se_c_zhyd\")\n# edit Nuts2 field\n  se_ecrins_zhyd@data$Nuts2 <- str_replace_all(se_ecrins_zhyd@data$Nuts2,\"_\",\"\")\n  se_ecrins_zhyd@data$Nuts2 <- str_replace(se_ecrins_zhyd@data$Nuts2,\"WNT\",\"\")\n# import swedish rivers (c_zhyd) from shapefile\n  se_ecrins_rivers         <- readOGR(dsn =\"ecr_riv\", layer = \"se_ecr_riv\")\n# reset wd and save \n  setwd(mywd)\n\n### load leif kuhlins hydrostation dataset ###\n  hydrostations_sweden_data  <- as_tibble(read.csv(file=\"data/hydro/vattenkraft_info_1500.csv\", sep=\";\", dec=\".\"))\n\n# create spatial hydrostation dataset\n  hydrostations_sweden_spatial <- SpatialPointsDataFrame(coords = hydrostations_sweden_data[,c(\"Long\",\"Lat\")], data = hydrostations_sweden_data, proj4string = CRS(ehype_subbasins_EU@proj4string@projargs))\n\n\n### adjust projections if they are not identical\nif(!identical(proj4string(Sweden_Nuts3),proj4string(ehype_subbasins_EU))){\n  Sweden_Nuts3 <-  spTransform(Sweden_Nuts3, CRS(ehype_subbasins_EU@proj4string@projargs))  \n  }\nif(!identical(proj4string(hydrostations_sweden_spatial),proj4string(ehype_subbasins_EU))){\n  hydrostations_sweden_spatial <-  spTransform(hydrostations_sweden_spatial, CRS(ehype_subbasins_EU@proj4string@projargs))  \n  }\nif(!identical(proj4string(se_ecrins_rivers),proj4string(ehype_subbasins_EU))){\n  se_ecrins_rivers <-  spTransform(se_ecrins_rivers, CRS(ehype_subbasins_EU@proj4string@projargs))  \n  }\nif(!identical(proj4string(se_ecrins_zhyd),proj4string(ehype_subbasins_EU))){\n  se_ecrins_zhyd <-  spTransform(se_ecrins_zhyd, CRS(ehype_subbasins_EU@proj4string@projargs))  \n  }\nif(!identical(proj4string(se_bidding_areas),proj4string(ehype_subbasins_EU))){\n    se_bidding_areas <-  spTransform(se_bidding_areas, CRS(ehype_subbasins_EU@proj4string@projargs))  \n  }\n\n\n####################################################################################################### \n#####            Add IDs to link hydrostation dataframe with ecrins and hype data                 #####\n#######################################################################################################    \n   \n# preselect ehype & shype subbasins that contain hydrostations \nse_ehype_basins_hp = ehype_subbasins_EU[!is.na(over(ehype_subbasins_EU,as(hydrostations_sweden_spatial,\"SpatialPoints\"))),]\nse_shype_basins_hp = shype_subbasins_Sweden[!is.na(over(shype_subbasins_Sweden,as(hydrostations_sweden_spatial,\"SpatialPoints\"))),]\n\n#test plots\nplot(se_ehype_basins_hp)\nplot(se_shype_basins_hp)\n\n# select subbasins within certain region\n#ehype_subbasins_SE = ehype_subbasins_EU[!is.na(over(as(ehype_subbasins_EU,\"SpatialPolygons\"),as(Sweden_Nuts3_84,\"SpatialPolygons\"))),]\n\n# for distance calculations spatial datasets have to be projected to planar coordinate systems\nETRS89_LAEA <- \"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs\"\ntemp                      <- se_ecrins_rivers[which(se_ecrins_rivers@data$IS_MAIN == 1),]\nse_ecrins_rivers_ETRS89   <- spTransform(temp, ETRS89_LAEA)  \nhydrostations_sweden_spatial_ETRS89 <-  spTransform(hydrostations_sweden_spatial, ETRS89_LAEA)  \nremove(temp)\n\n# create new dataframe for saving information on ecrin river trunk that are closest to hydrostations\nse_ecrins_rivers_data_hp <- as_tibble(se_ecrins_rivers_ETRS89@data)[1,]\n\n### save ehype and shype riverbasin subids and ecrin ids into hydrostation dataset\nfor (i in seq(nrow(hydrostations_sweden_data))){\n  # find corresponding ehype and shype subbasin for each hydrostation\n  temp  <-  se_ehype_basins_hp[!is.na(over(se_ehype_basins_hp, as(hydrostations_sweden_spatial[i,],\"SpatialPoints\"))),]\n  temp2 <-  se_shype_basins_hp[!is.na(over(se_shype_basins_hp, as(hydrostations_sweden_spatial[i,],\"SpatialPoints\"))),]\n  # find closest river segment (trunk) for each hydrostation \n  closest_id <- which.min(gDistance(as(hydrostations_sweden_spatial_ETRS89[i,],\"SpatialPoints\"),se_ecrins_rivers_ETRS89, byid = TRUE )) \n  se_ecrins_rivers_data_hp[i,]  <- as_tibble(se_ecrins_rivers_ETRS89@data[closest_id,])\n  \n  hydrostations_sweden_spatial$ehype_id[i]  <- temp@data$SUBID\n  hydrostations_sweden_spatial$shype_id[i]  <- as.character(temp2@data$SUBID)\n  hydrostations_sweden_spatial$ecr_basin_id[i] <- as.character(se_ecrins_rivers_data_hp[i,]$Bas0_ID) \n  hydrostations_sweden_spatial$ecr_river_id[i] <- as.character(se_ecrins_rivers_data_hp[i,]$River_ID)\n  hydrostations_sweden_spatial$ecr_trunk_id[i] <- as.character(se_ecrins_rivers_data_hp[i,]$TR)\n  print(i)\n}\n\n# add info to se_ecrins_river if there is a hydro station\nse_ecrins_rivers@data <- se_ecrins_rivers@data %>% \n  mutate(is_hydro_power = ifelse(TR %in% se_ecrins_rivers_data_hp$TR, 1, 0))\n\n# remove temporary files\nremove(se_ecrins_rivers_ETRS89, hydrostations_sweden_spatial_ETRS89)\n\n\n####################################################################################################### \n#####   Add bidding zone information,  preselect hydrostations and prepare GAMS input file        #####\n####################################################################################################### \n\n# add information of bidding zone to hydro station dataset\nhydrostations_sweden_spatial@data$bidding_area <- NA\n\nfor (i in seq(se_bidding_areas@data$elomrade)){\n  temp <- se_bidding_areas[which(se_bidding_areas@data$elomrade == i),]\n  temp_hydro_sel = hydrostations_sweden_spatial[!is.na(over(hydrostations_sweden_spatial,as(temp,\"SpatialPolygons\"))),]\n  elomrade_hydro_list <- as.character(temp_hydro_sel@data$name)\n  hydrostations_sweden_spatial@data$bidding_area[which(hydrostations_sweden_spatial@data$name %in% elomrade_hydro_list)] <- i\n  print(i)\n}\n\n# save complete dataset of hydrostations\nhydrostations_sweden_data <- data.frame(hydrostations_sweden_spatial@data)\nsave(hydrostations_sweden_data,   file=\"data/hydro/hydrostations_sweden_data_all.Rdata\")\nsave(hydrostations_sweden_spatial, file = \"data/hydro/hydrostations_sweden_spatial_all.RData\")\n\n# pre-select plants - only those with capacity of more than 10MW and calculate share of total production\nhydrostations_sweden_spatial@data %>%  \n  group_by(capacity > 10000) %>%  \n  summarise(total_prod = sum(normal_prod, na.rm=TRUE)) -> total_prod\nhydrostations_sweden_spatial@data %>%  \n    group_by(capacity > 10000) %>% count() -> count_hydro\n\nhydrostations_sweden_spatial <- hydrostations_sweden_spatial[which(hydrostations_sweden_spatial@data$capacity > 10000),]\n\nprint(paste(count_hydro$n[2],\"out of\", sum(count_hydro$n),  \"hydrostations selected that account for\", \n            100* round(total_prod$total_prod[2] / sum(total_prod$total_prod),3), \"% of annual hydro power production\"))\n\nremove(count_hydro,total_prod)\n\n# update data dataframe\nhydrostations_sweden_data <- hydrostations_sweden_spatial@data\n\n\n####################################################################################################### \n#####                                 Save data frames                                            #####\n####################################################################################################### \n\nsave(hydrostations_sweden_data,   file=\"data/hydro/hydrostations_sweden_data.Rdata\")\nsave(se_ecrins_rivers_data_hp,   file=\"data/hydro/se_ecrins_rivers_data_hp.Rdata\")\n\n# save spatial datasets for sweden as Rdata and export to shapefile\nsave(se_ecrins_zhyd,     file=\"data/hydro/se_ecrins_zhyd.Rdata\")\nsave(se_ecrins_rivers,   file=\"data/hydro/se_ecrins_rivers.Rdata\")\nsave(se_ehype_basins_hp, file = \"data/hydro/se_ehype_basins_hp.RData\")\nsave(se_shype_basins_hp, file = \"data/hydro/se_shype_basins_hp.RData\")\nsave(hydrostations_sweden_spatial, file = \"data/hydro/hydrostations_sweden_spatial.RData\")\n\n# TODO implement shapefile export\nnames(hydrostations_sweden_spatial@data)\nwriteOGR(obj=hydrostations_sweden_spatial, dsn=\"results/gis\", layer=\"hydro_stations_se\", driver=\"ESRI Shapefile\", overwrite_layer=TRUE)\n\n# save selected subbasins into download list for time series data from ehype / shype\nehype_subids_download <- as.character(hydrostations_sweden_spatial@data$ehype_id)\nshype_subids_download <- as.character(hydrostations_sweden_spatial@data$shype_id)\n\n\n####################################################################################################### \n#####                         Download and save EHYPE timeseries                                  #####\n####################################################################################################### \n\n# download url\nurl_ehype <- \"http://hypeweb.smhi.se/europehype/time-series/download/\"\n# save folder\nsave_folder <- \"data/hydro/ehype/\"\n# filetype of download files\nfiletype  <- \".xls\"\n \n### prepare output file\ndownload.file(\"http://hypeweb.smhi.se/europehype/time-series/download/8801544\", \"data/hydro/ehype/8801544.xls\", mode=\"wb\")\ntemp <- read_excel(\"data/hydro/ehype/8801544.xls\", 1, col_names = TRUE, col_types = NULL, na = \"\", skip=0)\nts_ehype <- tibble(date = temp$Date)\n\n### combine timeseries from excel files into one tibble\nfor ( i in seq_along(ehype_subids_download))\n{\n  ehype_save <- paste(save_folder,ehype_subids_download[i],filetype,sep=\"\")\n  # download file if not available locally\n  if (!file.exists(ehype_save)) {\n    url_file  <- paste(url_ehype,ehype_subids_download[i], sep = \"\")\n    download.file(url_file, ehype_save, mode=\"wb\")  \n  }\n  temp <- read_excel(ehype_save, 1, col_names = TRUE, col_types = NULL, na = \"\", skip=0)\n  names(temp) <- c(\"day\",ehype_subids_download[i])\n  #store in tibble\n  ts_ehype[,i+1] <- temp[2]\n}\n\n# tidy and save\nts_ehype <- gather(ts_ehype,basin_id,runoff,-date)\nsave(ts_ehype, file = \"data/hydro/ts_ehype.RData\")\nwrite_feather(ts_ehype, path = \"data/hydro/ts_ehype.feather\")\n\n\n####################################################################################################### \n#####                         Download and save SHYPE timeseries                                  #####\n####################################################################################################### \n\n# download location\nurl_shype <- \"http://vattenwebb.smhi.se/modelarea/basindownload/\"\n# save folder\nsave_folder <- \"data/hydro/shype/\"\n# filetype of download files\nfiletype  <- \".xls\"\n\n# prepare output file\ndownload.file(\"http://vattenwebb.smhi.se/modelarea/basindownload/31672\", \"data/hydro/shype/31672.xls\", mode=\"wb\")\ntemp <- read_excel(\"data/hydro/shype/31672.xls\", sheet = \"Dygnsvärden\", col_names = FALSE, col_types = NULL, na = \"NA\", skip=3)\nshype_data <- tibble(date = temp[[1]])\n\n# different dataframes for all hype time series\nts_shype_tot  <- shype_data\nts_shype_cor  <- shype_data\nts_shype_nat  <- shype_data\nremove(shype_data)\n\n# combine timeseries from excel files into one dataframe\nfor ( i in seq_along(shype_subids_download))\n  {\n  shype_save <- paste(save_folder,shype_subids_download[i],filetype,sep=\"\")\n  \n  # download file if not available locally\n    if (!file.exists(shype_save)) {\n      url_file  <- paste(url_shype,shype_subids_download[i], sep = \"\")\n      download.file(url_file, shype_save, mode=\"wb\")  \n    }\n  \n  temp <- read_excel(shype_save, sheet = \"Dygnsvärden\", col_names = FALSE, col_types = NULL, na = \"NA\", skip=3)\n\n  #store in dataframe old - style\n  ts_shype_tot[,i+1]  <- temp[,2]\n  ts_shype_cor[,i+1]  <- temp[,3]\n  ts_shype_nat[,i+1]  <- temp[,4]\n  \n  # set current river basin subid as column name\n  names(ts_shype_tot)[1+i] <- as.character(shype_subids_download[i])\n  names(ts_shype_cor)[1+i] <- as.character(shype_subids_download[i])\n  names(ts_shype_nat)[1+i] <- as.character(shype_subids_download[i])\n  \n  #if (file.exists(ehype_save)) file.remove(ehype_save)\n}\n\n# tidy and bind\nts_shype_tot <- ts_shype_tot %>% gather(basin_id,runoff,-date)  %>%  mutate(type = \"total\")\nts_shype_cor <- ts_shype_cor %>% gather(basin_id,runoff,-date)  %>%  mutate(type = \"corrected\")\nts_shype_nat <- ts_shype_nat %>% gather(basin_id,runoff,-date)  %>%  mutate(type = \"natural\")\nts_shype <- bind_rows(ts_shype_tot, ts_shype_cor, ts_shype_nat)\n\n# save\nsave(ts_shype, file = \"data/hydro/ts_shype.RData\")\nwrite_feather(ts_shype, path = \"data/hydro/ts_shype.feather\")\n",
    "created" : 1481111138263.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2875424969",
    "id" : "9C74EE63",
    "lastKnownWriteTime" : 1481110103,
    "last_content_update" : 1481110103,
    "path" : "~/Dropbox/github/RE_EXTREME/scripts/hydro/01_data_download_and_preparation.R",
    "project_path" : "scripts/hydro/01_data_download_and_preparation.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}