{
    "collab_server" : "",
    "contents" : "########################################################################################################\n#     This script finds the next downriver power plant for each hydro station and calculates the \n#     distance in between (sum of river segment lengths)\n#     The results are arranged in a separate table for GAMS import\n\n#     ToDos\n#     add information on maximum Reservoir, min and max flow (if available) \n\n####################################################################################################### \n#####                                       Load libraries                                        #####\n####################################################################################################### \nsource(\"scripts/hydro/00_load_libraries.R\")\n\n\n####################################################################################################### \n#####                                       Load data                                             #####\n#######################################################################################################\n\nload(\"data/hydro/hydrostations_sweden_data.Rdata\")\nload(\"data/hydro/se_ecrins_rivers_data_hp.Rdata\")\n\n# load ecrin data sets\nload(file=\"data/hydro/se_ecrins_zhyd.Rdata\")\nload(file=\"data/hydro/se_ecrins_rivers.Rdata\")\n# load hype datasets\nload(file=\"data/hydro/se_ehype_basins_hp.RData\")\nload(file=\"data/hydro/se_shype_basins_hp.RData\")\n# load hydropower station spatial data set\nload(file=\"data/hydro/hydrostations_sweden_spatial.RData\")\n\n### Load Swedisch bidding areas (test file)\nse_bidding_areas           <- readOGR(dsn = \"gis_data/elomrade\", layer = \"elomrade_test\")\n\n\n####################################################################################################### \n#####                 Identify and assign down river hydro plants                                 #####\n####################################################################################################### \n\nhydrostations_sweden_spatial$down_river_hp       <- NA\nhydrostations_sweden_spatial$down_river_hp_dist  <- NA\nse_ecrins_rivers$along_hp_river <- NA\nsub_basin_NA <- NA\nindex_NA <- 1\n\nfor (i in seq(hydrostations_sweden_spatial)){\n  # identify id of downriver segment\n  temp <- se_ecrins_rivers@data %>% filter(TR == hydrostations_sweden_spatial@data[i,]$ecr_trunk_id)  %>% select(NXDownID,IS_D)\n  down_river_id <- as.character(temp$NXDownID)\n  is_down_river <- temp$IS_D\n  # define starting values\n  check_hydro <- 0\n  count       <- 0\n  distance    <- 0\n\n    while (check_hydro == 0 & is_down_river == 0 ){\n    # check if there is hydropower  \n      temp <- se_ecrins_rivers@data %>% filter(TR %in% down_river_id)\n      if (nrow(temp) > 0){\n        down_river_id <- as.character(temp$NXDownID)\n        is_down_river <- temp$IS_D\n        check_hydro <- temp$is_hydro_power\n        distance <- distance + temp$L_SEG\n        count = count + 1\n        #print(count)\n        #print(distance)\n      } else {\n        print(paste(\"sub river basin not found: \", down_river_id ))\n        sub_basin_NA[index_NA] <- down_river_id \n        index_NA <- index_NA + 1 \n        is_down_river <- 1  \n        }\n    }\n \n  print(i)\n  \n  if (check_hydro == 1 ){\n    temp2 <- hydrostations_sweden_spatial@data %>% filter(ecr_trunk_id == as.character(temp$TR)) %>% select(name)\n    hydrostations_sweden_spatial@data[i,]$down_river_hp       <- ifelse (length(temp2$name) > 1,\"more_hp\",as.character(temp2$name))\n    hydrostations_sweden_spatial@data[i,]$down_river_hp_dist  <- distance\n    }\n}\n\n\n# save data frames\nhydrostations_sweden_data <- data.frame(hydrostations_sweden_spatial@data)\nsave(hydrostations_sweden_data, file = \"data/hydro/hydrostations_sweden_data.RData\")\nsave(hydrostations_sweden_spatial, file = \"data/hydro/hydrostations_sweden_spatial.RData\")\nsave(sub_basin_NA, file=\"data/hydro/sub_basin_NA.Rdata\")\n\nremove(temp, temp2)\n\n\n####################################################################################################### \n#####                       Prepare hydropower data set for GAMS                                  #####\n####################################################################################################### \n\n# function for hydro (m3) to power (MWh) conversion\nhydro_power_conv_factor <- function(height){\n  efficency = 0.9   # turbine efficiency\n  density   = 1000  # kg/m3 for water\n  g         = 9.81  # acceleration of gravity (9.81 m/s2)\n  hydro_conv_factor = efficency * density *  g * height / 1E6 # m3 -> MWh\n}\n\n# prepare dataset for GAMS\nhydrostations_sweden_gams <- hydrostations_sweden_data %>% \n  select(shype_id, name, bidding_area, river, capacity, height, down_river_hp_dist, down_river_hp) %>% \n  mutate(shype_id = paste(\"SHP_\",shype_id, sep=\"\")) %>%\n  mutate(bidding_area = paste(\"SE_\",bidding_area, sep=\"\")) %>%\n  mutate(minFlow = 0) %>%\n  mutate(maxFlow = 1E6) %>%\n  mutate(maxReservoir = 1E6) %>%\n  mutate(hydro_conv_factor = hydro_power_conv_factor(height)) %>%\n  mutate(maxHydPower = capacity / 1E3) %>%\n  mutate(river = paste(\"RS_\",as.numeric(factor(as.character(river))), sep=\"\")) %>% \n  group_by(bidding_area) %>% \n  mutate(plant = paste(\"HP_\", seq_along(bidding_area) , sep=\"\")) %>% \n  select(-height,-capacity)\n\n# replace downriver plant name by downriver plant ID\ntemp <- left_join(hydrostations_sweden_gams[\"down_river_hp\"],\n        hydrostations_sweden_gams[c(\"name\", \"plant\")], by= c(\"down_river_hp\" = \"name\"))\nhydrostations_sweden_gams$down_river_hp <- temp$plant\nhydrostations_sweden_gams$name <- NULL \n\n# reorder columns\nhydrostations_sweden_gams <- hydrostations_sweden_gams[c(\"shype_id\", \"bidding_area\", \n                            \"river\", \"plant\", \"minFlow\", \"maxFlow\", \"maxReservoir\", \"maxHydPower\", \n                            \"down_river_hp_dist\", \"hydro_conv_factor\", \"down_river_hp\")]\n\n# rename columns  \nnames(hydrostations_sweden_gams) <- c(\"id\",\t\"Region\",\t\"River\",\t\"Plant\",\t\"minFlow\",\t\"maxFlow\",\t\n                                      \"maxReservoir\",\t\"maxHydPower\",\t\"runOffDelay\",\t\"hydroConvFact\",\t\"downRiver\")\n\nsave(hydrostations_sweden_gams, file = \"results/hydro/hydrostations_sweden_gams.RData\")\nwrite_feather(hydrostations_sweden_gams, path = \"results/hydro/hydrostations_sweden_gams.feather\")\n",
    "created" : 1481111134706.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1201539853",
    "id" : "43597FB0",
    "lastKnownWriteTime" : 1481110134,
    "last_content_update" : 1481110134,
    "path" : "~/Dropbox/github/RE_EXTREME/scripts/hydro/02_prepare_hydrostation_dataset.R",
    "project_path" : "scripts/hydro/02_prepare_hydrostation_dataset.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}